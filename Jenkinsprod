pipeline {
    agent any

    tools {
        nodejs "NodeJS_18"
    }

    environment {
        NETLIFY_AUTH_TOKEN = credentials('netlify_token')
        NETLIFY_PROD_SITE_ID = 'fa99e411-b263-44b8-b586-1eb374e80be1'  // Replace with actual Netlify production site ID
        GITHUB_TOKEN = credentials('github_token')
        REPO_URL = "https://github.com/kudaykiranreddy/React_app_AWS.git"
        PROD_BRANCH = "prod"
    }

    stages {
        stage('Checkout Production Code') {
            steps {
                script {
                    echo "üîÑ Checking out production code from GitHub..."
                    sh '''
                        rm -rf React_app_AWS || true
                        git clone -b $PROD_BRANCH $REPO_URL React_app_AWS || { echo "‚ùå Git clone failed"; exit 1; }
                        echo "‚úÖ Code checkout complete."
                    '''
                }
            }
        }

        stage('Verify Directory Structure') {
            steps {
                script {
                    sh '''
                        echo "üìÅ Checking if React_app_AWS/To_do_app exists..."
                        ls -l React_app_AWS || { echo "‚ùå React_app_AWS repo not found!"; exit 1; }
                        ls -l React_app_AWS/To_do_app || { echo "‚ùå To_do_app directory not found!"; exit 1; }
                        echo "‚úÖ Directory structure verified."
                    '''
                }
            }
        }

        stage('Verify Node.js & npm') {
            steps {
                script {
                    echo "üîç Checking Node.js and npm versions..."
                    sh '''
                        which node || { echo "‚ùå Node.js not found!"; exit 1; }
                        which npm || { echo "‚ùå npm not found!"; exit 1; }
                        echo "‚úÖ Node.js Version: $(node -v)"
                        echo "‚úÖ npm Version: $(npm -v)"
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                        echo "üì¶ Installing dependencies..."
                        cd React_app_AWS/To_do_app
                        npm install || { echo "‚ùå Failed to install dependencies"; exit 1; }
                    '''
                }
            }
        }

        stage('Build Application') {
            steps {
                script {
                    sh '''
                        echo "‚öôÔ∏è Building application..."
                        cd React_app_AWS/To_do_app
                        npm run build || { echo "‚ùå Build failed"; exit 1; }
                        echo "‚úÖ Build successful."
                    '''
                }
            }
        }

        stage('Deploy to Netlify (Production)') {
            steps {
                script {
                    echo "üöÄ Deploying to Netlify Production..."
                    sh '''
                        cd React_app_AWS/To_do_app

                        # Install Netlify CLI
                        npm install -g netlify-cli

                        # Deploy to Netlify production site
                        npx netlify deploy --auth $NETLIFY_AUTH_TOKEN --site $NETLIFY_PROD_SITE_ID --dir dist --prod --message "Production deployment" || { echo "‚ùå Production deployment to Netlify failed"; exit 1; }

                        echo "‚úÖ Production deployment successful!"
                    '''
                }
            }
        }

        stage('Send Email Notification') {
            steps {
                echo "üìß Sending email notification for production deployment..."
                mail to: 'ukalicheti@anergroup.com',
                     subject: 'üöÄ Production Deployment Successful',
                     body: 'The latest changes have been successfully deployed to Netlify Production.',
                     from: 'kudaykiranreddy143@gmail.com',
                     replyTo: 'kudaykiranreddy143@gmail.com'
            }
        }
    }

    post {
        always {
            echo "Cleaning up workspace..."
            cleanWs()
        }
        success {
            echo "‚úÖ Deployment completed successfully!"
        }
        failure {
            echo "‚ùå Deployment failed. Check logs for details."
        }
    }
}
